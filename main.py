# -*- coding: utf-8 -*-
"""Proj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U8tqGuyWNx7oUMrkMIXYEDpL9rHFgieM
"""

!pip install fastapi uvicorn[standard] pandas openpyxl aiosmtplib pyngrok python-multipart nest-asyncio

!ngrok config add-authtoken 32I8tOQQsgyHUfDfcxC4CpdTL7U_2zN5RukqGipZnWHiio4EG

!pip install email-validator
!pip install "pydantic[email]"


from fastapi import FastAPI, UploadFile, Form, HTTPException
from pydantic import BaseModel, EmailStr
from typing import Optional
import pandas as pd
import sqlite3
from datetime import datetime, timedelta
import aiosmtplib
from email.message import EmailMessage
import os

# --- FastAPI app ---
app = FastAPI(title="Clinic Appointment API")

DB_FILE = "patients.db"
PATIENTS_CSV = "patients.csv"
FORM_PATH = "New-Patient-Intake-Form.pdf"

# --- Setup SQLite DB and load CSV data ---
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS patients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            last_name TEXT,
            first_name TEXT,
            dob DATE,
            gender TEXT,
            cell_phone TEXT,
            email TEXT,
            address TEXT
        )
    ''')
    conn.commit()

    cur.execute("SELECT COUNT(*) FROM patients")
    count = cur.fetchone()[0]
    if count == 0 and os.path.exists(PATIENTS_CSV):
        df = pd.read_csv(PATIENTS_CSV)
        for _, row in df.iterrows():
            cur.execute('''
                INSERT INTO patients (last_name, first_name, dob, gender, cell_phone, email, address)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                row['Last Name'], row['First Name'], row['Date of Birth'],
                row['Gender'], row['Cell Phone'], row['Email Address'],
                f"{row['Street Address']}, {row['City']}, {row['State']} {int(row['ZIP Code']) if not pd.isnull(row['ZIP Code']) else ''}"
            ))
        conn.commit()
    conn.close()

@app.on_event("startup")
def startup_event():
    init_db()

# --- Models for API requests ---
class PatientInfo(BaseModel):
    first_name: str
    last_name: str
    dob: str  # YYYY-MM-DD
    email: EmailStr
    cell_phone: Optional[str] = None

class AppointmentRequest(BaseModel):
    patient: PatientInfo
    is_new_patient: bool
    preferred_date: str  # YYYY-MM-DD

# --- Helpers ---
def lookup_patient(last_name, first_name, dob):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute('''
        SELECT id, last_name, first_name, dob, email FROM patients
        WHERE LOWER(last_name) = ? AND LOWER(first_name) = ? AND dob = ?
    ''', (last_name.lower(), first_name.lower(), dob))
    result = cur.fetchone()
    conn.close()
    return result

def schedule_appointment(preferred_date, is_new_patient):
    base_time = datetime.strptime(preferred_date + " 09:00", "%Y-%m-%d %H:%M")
    duration = timedelta(minutes=60) if is_new_patient else timedelta(minutes=30)
    end_time = base_time + duration
    return base_time, end_time

def export_confirmation(patient, appointment_start, appointment_end):
    df = pd.DataFrame([{
        "First Name": patient[2], "Last Name": patient[1], "DOB": patient[3],
        "Appointment Start": appointment_start.strftime("%Y-%m-%d %H:%M"),
        "Appointment End": appointment_end.strftime("%Y-%m-%d %H:%M"),
    }])
    filename = f"confirmation_{patient[1]}_{patient[2]}.xlsx"
    df.to_excel(filename, index=False)
    return filename

async def send_email(to_email, subject, body, attachment_path=None):
    message = EmailMessage()
    message["From"] = "clinic@example.com"
    message["To"] = to_email
    message["Subject"] = subject
    message.set_content(body)
    if attachment_path and os.path.exists(attachment_path):
        with open(attachment_path, "rb") as f:
            file_data = f.read()
            file_name = os.path.basename(attachment_path)
        message.add_attachment(file_data, maintype="application", subtype="octet-stream", filename=file_name)
    # Replace with real SMTP later
    await aiosmtplib.send(message, hostname="smtp.example.com", port=587, username="user", password="password")

# --- Endpoints ---
@app.post("/intake/")
async def patient_intake(patient: PatientInfo):
    existing_patient = lookup_patient(patient.last_name, patient.first_name, patient.dob)
    if existing_patient:
        return {"message": "Patient already registered.", "patient_id": existing_patient[0]}
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute('''
        INSERT INTO patients (last_name, first_name, dob, gender, cell_phone, email, address)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (patient.last_name, patient.first_name, patient.dob, "", patient.cell_phone or "", patient.email, ""))
    conn.commit()
    patient_id = cur.lastrowid
    conn.close()
    return {"message": "Patient intake complete.", "patient_id": patient_id}

@app.post("/schedule/")
async def schedule(req: AppointmentRequest):
    patient = lookup_patient(req.patient.last_name, req.patient.first_name, req.patient.dob)
    if not patient:
        raise HTTPException(status_code=404, detail="Patient not found, please complete intake first.")
    start, end = schedule_appointment(req.preferred_date, req.is_new_patient)
    confirmation_file = export_confirmation(patient, start, end)
    email_body = f"Your appointment is scheduled from {start} to {end}."
    await send_email(req.patient.email, "Appointment Confirmation", email_body, confirmation_file)
    return {"message": "Appointment scheduled and confirmation email sent.", "start": str(start), "end": str(end)}

@app.post("/send-intake-form/")
async def send_intake_form(email: EmailStr = Form(...)):
    await send_email(email, "Patient Intake Form", "Please find attached your intake form.", FORM_PATH)
    return {"message": f"Intake form sent to {email}"}

import nest_asyncio
import uvicorn
from pyngrok import ngrok

nest_asyncio.apply()

# Open ngrok tunnel
public_url = ngrok.connect(8000).public_url
print("Public URL:", public_url)
print("Swagger Docs:", public_url + "/docs")

# Start FastAPI server
uvicorn.run(app, host="0.0.0.0", port=8000)

# Python packages (includes email-validator via pydantic[email])
!pip install fastapi uvicorn nest_asyncio "pydantic[email]" pandas openpyxl aiosmtplib python-multipart

